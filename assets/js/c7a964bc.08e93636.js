"use strict";(self.webpackChunkkfu=self.webpackChunkkfu||[]).push([[3912],{8287:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"gbs-wavs","title":"gbs-wavs","description":"DETECT SILENCE AND CREATE .TXT WITH TIMESTAMPS","source":"@site/docs/gbs-wavs.md","sourceDirName":".","slug":"/gbs-wavs","permalink":"/kfu/docs/gbs-wavs","draft":false,"unlisted":false,"editUrl":"https://github.com/colortelevision/kfu/tree/main/docs/gbs-wavs.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"sox","permalink":"/kfu/docs/audio/sox"},"next":{"title":"Welcome to KRIMP UNIVERSITY \ud83c\udf93","permalink":"/kfu/docs/home"}}');var i=t(4848),o=t(8453);const r={},a=void 0,l={},c=[];function d(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"#SPLIT AUDIO FILE INTO INDIVIDUAL CLIPS, THEN CONVERT FOR GB-STUDIO"}),"\n",(0,i.jsx)(n.p,{children:"DETECT SILENCE AND CREATE .TXT WITH TIMESTAMPS"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ffmpeg -i input.wav -af silencedetect=n=-30dB:d=0.5 -f null - 2> silence_log.txt\n"})}),"\n",(0,i.jsx)(n.p,{children:"PYTHON SCRIPT TO EXTRACT AUDIO CLIPS (split.py)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'import re\nimport subprocess\n\n# Configuration\ninput_audio = "input.wav"\noutput_prefix = "output_segment"\nsilence_log = "silence_log.txt"\nsilence_threshold = 0.5  # Minimum non-silent duration in seconds\n\n# Parse silence_log.txt\nwith open(silence_log, "r") as f:\n    log = f.readlines()\n\n# Extract silence start and end times\nsilence_times = []\nfor line in log:\n    silence_start = re.search(r"silence_start: (\\d+\\.?\\d*)", line)\n    silence_end = re.search(r"silence_end: (\\d+\\.?\\d*)", line)\n    if silence_start:\n        silence_times.append((float(silence_start.group(1)), "start"))\n    if silence_end:\n        silence_times.append((float(silence_end.group(1)), "end"))\n\n# Ensure silence_times is sorted\nsilence_times.sort()\n\n# Calculate non-silent intervals\nnon_silent_segments = []\nlast_end = 0\nfor time, event in silence_times:\n    if event == "start" and time - last_end >= silence_threshold:\n        non_silent_segments.append((last_end, time))\n    if event == "end":\n        last_end = time\n\n# Handle the final segment\ntotal_duration = float(\n    subprocess.run(\n        [\n            "ffprobe",\n            "-i", input_audio,\n            "-show_entries", "format=duration",\n            "-v", "quiet",\n            "-of", "csv=p=0"\n        ],\n        capture_output=True,\n        text=True,\n    ).stdout.strip()\n)\nif total_duration - last_end >= silence_threshold:\n    non_silent_segments.append((last_end, total_duration))\n\n# Create output audio segments\nfor i, (start, end) in enumerate(non_silent_segments, start=1):\n    output_file = f"{output_prefix}_{i:03d}.wav"\n    subprocess.run([\n        "ffmpeg",\n        "-i", input_audio,\n        "-ss", str(start),\n        "-to", str(end),\n        "-c", "copy",\n        output_file\n    ])\n    print(f"Created segment: {output_file}")\n'})}),"\n",(0,i.jsx)(n.p,{children:"RUN PYTHON SCRIPT"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python3 split.py\n"})}),"\n",(0,i.jsx)(n.p,{children:"SHELL SCRIPT TO CONVERT ALL .WAV\u2019S TO GAMEBOY FORMAT"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\n# Create an output directory if it doesn\'t exist\nOUTPUT_DIR="output"\nmkdir -p "$OUTPUT_DIR"\n\n# Iterate over all .wav files in the current directory\nfor file in *.wav; do\n  # Skip if no .wav files are found\n  if [[ ! -e $file ]]; then\n    echo "No .wav files found in the current directory."\n    exit 1\n  fi\n\n  # Extract the base filename (without extension)\n  base_name=$(basename "$file" .wav)\n\n  # Define the output file name with the \'-gb\' suffix\n  output_file="$OUTPUT_DIR/${base_name}-gb.wav"\n\n  # Convert the .wav file using ffmpeg\n  ffmpeg -i "$file" -ar 8000 -ac 1 -f wav -acodec pcm_u8 "$output_file" || {\n    echo "Failed to convert $file"\n    continue\n  }\n\n  echo "Converted $file to $output_file"\ndone\n\necho "All conversions are done! Check the \'$OUTPUT_DIR\' directory."\n'})}),"\n",(0,i.jsx)(n.p,{children:"INCREASE VOLUME BY 10DB"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\nfor file in *.wav; do\n  sox "$file" "${file%.wav}_louder.wav" gain 10\ndone\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);