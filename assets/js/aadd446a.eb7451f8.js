"use strict";(self.webpackChunkkfu=self.webpackChunkkfu||[]).push([[5058],{8629:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"audio/cdstream","title":"cdstream","description":"IMPORT CD CONTENTS","source":"@site/docs/audio/cdstream.md","sourceDirName":"audio","slug":"/audio/cdstream","permalink":"/kfu/docs/audio/cdstream","draft":false,"unlisted":false,"editUrl":"https://github.com/colortelevision/kfu/tree/main/docs/audio/cdstream.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Congratulations!","permalink":"/kfu/docs/tutorial-basics/congratulations"},"next":{"title":"sox","permalink":"/kfu/docs/audio/sox"}}');var i=t(4848),a=t(8453);const r={},o=void 0,c={},l=[];function f(e){const n={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"IMPORT CD CONTENTS"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"brew install cdparanoia\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cdparanoia -B\n"})}),"\n",(0,i.jsx)(n.p,{children:"COMBINE ALL .WAV\u2019S IN A DIR WITH A 2 SECOND CROSSFADE - crossfade.sh"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\n# Duration of the crossfade\ncrossfade_duration=2\n\n# Temporary file for intermediate merges\ntemp_file="temp_combined.wav"\nfinal_file="final_combined.wav"\n\n# Get a sorted list of .wav files\nfiles=($(ls *.wav | sort))\n\n# Use the first file as the starting point\ncp "${files[0]}" "$final_file"\n\n# Remove the first file from the list\nunset files[0]\n\nfor file in "${files[@]}"; do\n    if [ -f "$file" ]; then\n        # Get the duration of the current final file\n        duration=$(ffprobe -i "$final_file" -show_entries format=duration -v quiet -of csv="p=0")\n        # Calculate the start time for the crossfade effect\n        crossfade_start=$(echo "$duration - $crossfade_duration" | bc)\n        # Create the crossfade effect between the current final file and the next .wav file\n        ffmpeg -i "$final_file" -i "$file" -filter_complex \\\n        "[0:a][1:a] acrossfade=d=$crossfade_duration:o=0:c1=tri:c2=tri" \\\n        "$temp_file"\n        # Move the temporary file to be the new final file\n        mv "$temp_file" "$final_file"\n    fi\ndone\n\n# Clean up temporary file if it exists\n[ -f "$temp_file" ] && rm "$temp_file"\n\necho "All files have been combined into $final_file with a $crossfade_duration second crossfade between tracks."\n'})}),"\n",(0,i.jsx)(n.p,{children:"GIVE PERMISSION TO SCRIPT TO RUN"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"chmod +x crossfade.sh\n"})}),"\n",(0,i.jsx)(n.p,{children:"RUN SCRIPT"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"./crossfade.sh\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);